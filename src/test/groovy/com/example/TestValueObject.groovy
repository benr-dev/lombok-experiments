/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package com.example

import spock.lang.Specification

import java.lang.reflect.Constructor
import java.lang.reflect.Method

class TestValueObject extends Specification {
    def "value object has only getter methods"() {
        setup:
        Class<ValueObject> clazz = Class.forName("com.example.ValueObject")

        when:
        def setterCount = 0
        for(Method m: clazz.methods) {
            if (m.getName().startsWith("set")) setterCount++
        }

        then:
        assert setterCount == 0
    }

    def "value object has no setter"() {
        setup:
        Class<ValueObject> clazz = Class.forName("com.example.ValueObject")

        when:
        Method[] methods = clazz.methods

        then:
        for(Method m: methods) {
            assert m.getName().startsWith("set") == false
        }
    }

    def "value object has no default constructor"() {
        setup:
        Class<ValueObject> clazz = Class.forName("com.example.ValueObject")

        when:
        Constructor[] constructors = clazz.constructors

        then:
        assert constructors.size() == 1 : "Class has a single constructor"
        assert constructors[0].getParameterCount() != 0 : "Constructor is not a default constructor"
        assert constructors[0].getParameterCount() == 2 : "Constructor takes 2 parameters"
    }
}
